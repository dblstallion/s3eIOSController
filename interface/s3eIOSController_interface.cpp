/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */

#include "s3eExt.h"
#include "IwDebug.h"
#include "s3eDevice.h"


#include "s3eIOSController.h"


#ifndef S3E_EXT_SKIP_LOADER_CALL_LOCK
// For MIPs (and WP8) platform we do not have asm code for stack switching
// implemented. So we make LoaderCallStart call manually to set GlobalLock
#if defined __mips || defined S3E_ANDROID_X86 || (defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP))
#define LOADER_CALL_LOCK
#endif
#endif

/**
 * Definitions for functions types passed to/from s3eExt interface
 */
typedef     uint32(*s3eIOSController_getControllerCount_t)();
typedef s3eIOSController*(*s3eIOSController_getController_t)(uint32 index);
typedef  s3eResult(*s3eIOSControllerRegister_t)(s3eIOSControllerCallback callbackID, s3eCallback callbackFn, void* userData);
typedef  s3eResult(*s3eIOSControllerUnRegister_t)(s3eIOSControllerCallback callbackID, s3eCallback callbackFn);
typedef    s3eBool(*s3eIOSController_supportsBasic_t)(s3eIOSController* controller);
typedef    s3eBool(*s3eIOSController_supportsExtended_t)(s3eIOSController* controller);
typedef      int32(*s3eIOSController_getPlayerIndex_t)(s3eIOSController* controller);
typedef       void(*s3eIOSController_setPlayerIndex_t)(s3eIOSController* controller, int32 index);
typedef    s3eBool(*s3eIOSController_getButtonState_t)(s3eIOSController* controller, s3eIOSControllerButton button);
typedef      float(*s3eIOSController_getAxisValue_t)(s3eIOSController* controller, s3eIOSControllerAxis axis);

/**
 * struct that gets filled in by s3eIOSControllerRegister
 */
typedef struct s3eIOSControllerFuncs
{
    s3eIOSController_getControllerCount_t m_s3eIOSController_getControllerCount;
    s3eIOSController_getController_t m_s3eIOSController_getController;
    s3eIOSControllerRegister_t m_s3eIOSControllerRegister;
    s3eIOSControllerUnRegister_t m_s3eIOSControllerUnRegister;
    s3eIOSController_supportsBasic_t m_s3eIOSController_supportsBasic;
    s3eIOSController_supportsExtended_t m_s3eIOSController_supportsExtended;
    s3eIOSController_getPlayerIndex_t m_s3eIOSController_getPlayerIndex;
    s3eIOSController_setPlayerIndex_t m_s3eIOSController_setPlayerIndex;
    s3eIOSController_getButtonState_t m_s3eIOSController_getButtonState;
    s3eIOSController_getAxisValue_t m_s3eIOSController_getAxisValue;
} s3eIOSControllerFuncs;

static s3eIOSControllerFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0x5b1cd4ff, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE,                 "error loading extension: s3eIOSController");

        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0x5b1cd4ff, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool s3eIOSControllerAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? S3E_TRUE : S3E_FALSE;
}

uint32 s3eIOSController_getControllerCount()
{
    IwTrace(IOSCONTROLLER_VERBOSE, ("calling s3eIOSController[0] func: s3eIOSController_getControllerCount"));

    if (!_extLoad())
        return 0;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    uint32 ret = g_Ext.m_s3eIOSController_getControllerCount();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eIOSController* s3eIOSController_getController(uint32 index)
{
    IwTrace(IOSCONTROLLER_VERBOSE, ("calling s3eIOSController[1] func: s3eIOSController_getController"));

    if (!_extLoad())
        return NULL;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eIOSController* ret = g_Ext.m_s3eIOSController_getController(index);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult s3eIOSControllerRegister(s3eIOSControllerCallback callbackID, s3eCallback callbackFn, void* userData)
{
    IwTrace(IOSCONTROLLER_VERBOSE, ("calling s3eIOSController[2] func: s3eIOSControllerRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eIOSControllerRegister(callbackID, callbackFn, userData);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult s3eIOSControllerUnRegister(s3eIOSControllerCallback callbackID, s3eCallback callbackFn)
{
    IwTrace(IOSCONTROLLER_VERBOSE, ("calling s3eIOSController[3] func: s3eIOSControllerUnRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eIOSControllerUnRegister(callbackID, callbackFn);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eBool s3eIOSController_supportsBasic(s3eIOSController* controller)
{
    IwTrace(IOSCONTROLLER_VERBOSE, ("calling s3eIOSController[4] func: s3eIOSController_supportsBasic"));

    if (!_extLoad())
        return S3E_FALSE;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eBool ret = g_Ext.m_s3eIOSController_supportsBasic(controller);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eBool s3eIOSController_supportsExtended(s3eIOSController* controller)
{
    IwTrace(IOSCONTROLLER_VERBOSE, ("calling s3eIOSController[5] func: s3eIOSController_supportsExtended"));

    if (!_extLoad())
        return S3E_FALSE;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eBool ret = g_Ext.m_s3eIOSController_supportsExtended(controller);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

int32 s3eIOSController_getPlayerIndex(s3eIOSController* controller)
{
    IwTrace(IOSCONTROLLER_VERBOSE, ("calling s3eIOSController[6] func: s3eIOSController_getPlayerIndex"));

    if (!_extLoad())
        return -1;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    int32 ret = g_Ext.m_s3eIOSController_getPlayerIndex(controller);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void s3eIOSController_setPlayerIndex(s3eIOSController* controller, int32 index)
{
    IwTrace(IOSCONTROLLER_VERBOSE, ("calling s3eIOSController[7] func: s3eIOSController_setPlayerIndex"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eIOSController_setPlayerIndex(controller, index);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

s3eBool s3eIOSController_getButtonState(s3eIOSController* controller, s3eIOSControllerButton button)
{
    IwTrace(IOSCONTROLLER_VERBOSE, ("calling s3eIOSController[8] func: s3eIOSController_getButtonState"));

    if (!_extLoad())
        return S3E_FALSE;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eBool ret = g_Ext.m_s3eIOSController_getButtonState(controller, button);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

float s3eIOSController_getAxisValue(s3eIOSController* controller, s3eIOSControllerAxis axis)
{
    IwTrace(IOSCONTROLLER_VERBOSE, ("calling s3eIOSController[9] func: s3eIOSController_getAxisValue"));

    if (!_extLoad())
        return 0.0f;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    float ret = g_Ext.m_s3eIOSController_getAxisValue(controller, axis);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}
